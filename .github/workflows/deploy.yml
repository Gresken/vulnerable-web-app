name: Deploy Vulnerable Application                                 

on:
  push:
    branches:
      - master

jobs:

  # Vamos a ejecutar los escaneos SAST
  hadolint:
  # validación de dockerfile previo al analisis SAST
    name: linter dockerfile
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Hadolint
      continue-on-error: true
      run: docker run --rm -i hadolint/hadolint > Dockerfile

  secrets:
  # SAST secrets on code
    name: Horusec
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Horusec
      continue-on-error: true
      run: |
        curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/master/deployments/scripts/install.sh | bash -s latest
        horusec start -p="./" -e="true" -o="json" -O="./horusec.json"
    - uses: actions/upload-artifact@v3
      with:
        name: horusec
        path: horusec.json

  trivy:
  # User trivy for SAST 
    name: Trivy Scan
    runs-on: ubuntu-20.04
    permissions: 
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an image from Dockerfile
        run: |
          docker build -t trivy-temp:${{ github.sha }} .

      # Parsing to Security tab Github
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trivy-temp:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      # Parsing to Json
      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'trivy-temp:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'HIGH'
          exit-code: '1'
      - uses: actions/upload-artifact@v3
        with:
          name: trivy
          path: trivy-results.json

  # scan_npm:
  #   name: npm audit
  #   # Run NPM over GH Marketplace
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: install dependencies
  #       run: npm ci
  #     - uses: oke-py/npm-audit-action@v2
  #       with:
  #         audit_level: moderate
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         issue_assignees: oke-py
  #         issue_labels: vulnerability,test
  #         dedupe_issues: true

  
  npm-audit:
  # validación de NPM para nodeJS - SAST
    name: nmp audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - run: npm audit --registry=https://registry.npmjs.org  --json > npmaudit-results.json
        continue-on-error: true
      - uses: actions/upload-artifact@v3
        with:
          name: npmaudit
          path: npmaudit-results.json

  GitGuardian:
    # validación de GitGuardian - SAST
    name: GitGuardian scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetch all history so multiple commits can be scanned
      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1.17.2
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA:  ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_APIKEY }}
  
  # Vamos a ejecutar el deploy de la App
  deploy-heroku:
    name: Deploy Heroku
    # needs: [GitGuardian, npm-audit, trivy, secrets, linter]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.14 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_APIKEY}}
          heroku_app_name: "app-gresken" #el nombre que toma la App
          heroku_email: ${{secrets.HEROKU_MAIL}}
          branch: "master"
          usedocker: true

  # Vamos a ejecutar los escaneos DAST

  zap_scan:
      # Vamos a correr Zap de OWASP DAST
      runs-on: ubuntu-latest
      needs: deploy-heroku
      name: Run ZAP Full Scan - DAST
      permissions:
        #required for all workflows
        security-events: write
        actions: read
        contents: read
      steps:
        # - name: Checkout
        #   uses: actions/checkout@v2
        #   with:
        #     ref: master
        - name: ZAP Scan
          uses: zaproxy/action-full-scan@v0.5.1
          with:
            docker_name: 'owasp/zap2docker-stable'
            target: 'https://app-gresken-8881f75fae1e.herokuapp.com/'
            cmd_options: '-a'
            allow_issue_writing: false

  
  Snyk:
    # Vamos a correr el analisis de Snyk free
    runs-on: ubuntu-latest
    needs: deploy-heroku
    permissions: 
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif